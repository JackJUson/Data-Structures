Question 8

Describe in detail the steps you would perform to tell the sort programs apart.

Bubble sort - O(n^2), Stable and Adaptive
Insertion sort - O(n^2), Stable and Adaptive -> Need a larger value comparison 
for bubble and insertion since they are both best case O(n) and adapative, however
insertion sort will be faster in large number of inputs as bubble sort will perform
poorly compared to insertion sort due to a high number of swaps.

Insertion sort has less number of swaps compared to bubble sort due to transferring
the element to the partially sorted array at a time. Therefore insertion sort is 
almost twice as fast as bubble sort -> this can be distinguished with larger inputs

Merge sort - O(nlogn), Stable and non-adaptive
Since non-adaptive, use time complexity of sorted, reverse and random inputs to
conclude same time complexity for different order input. Indicating (together with
the O(nlogn) time complexity) the merge sort.

Naive Quicksort - O(nlogn), not stable and adaptive and fastest for random inputs
Time complexity for naive quicksort - obvious random input cost of time. Extremely
fast for large random inputs however smiliar time for sorted and reverse-ordered 
inputs.


- To distinguish merge sort from the others, use the fact that merge
  sort is always O(n log n).

- To distinguish naive quicksort from the others, use the fact that
  naive quicksort is O(n log n) on average (e.g., if given a random
  array), but is O(n^2) when given a sorted array.

- To distinguish bubble sort from insertion sort, use arrays which are
  sorted except that the largest element is at the beginning of the
  array and the smallest element is at the end. Insertion sort will
  be O(n), while bubble sort will be O(n^2).

