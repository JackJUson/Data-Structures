Question 1

What is the time complexity of the algorithm? Justify your answer.

O(n log n)

-- When the algorithm recursively breaks down the problem of size n into two
subproblems of size n/2, this should inevitibly should lead to O(log(n))
time complexity as the problem becomes halfed until its one or zero but
since converting the problem into two subproblems takes O(n), the halfing
time complexity is redundant and together with the O(n) time to combine,
leading to a cofficient of n, the time complexity of this algorithm in
big O notation is O(n). --

Since the algorithm recursively breaks a problem into two subproblems of half 
the size until the size of a subproblem is one or zero, there are log n levels 
of recursion. This should inevitibly lead to O(log n) time complexity to half
until all subproblems are one or zero.

Across each level, the work done to break the subproblems on that level into
two smaller subproblems and to combine the results of the problems is O(n).

Hence the time complexity of the algorithm is O(n log n).
