Question 5

(a) Describe and justify the steps you would take to determine which
    sorting algorithm the program uses.

    Since both selection sort and randomised quicksort are unstable,
    there is no point testing for the stability of order of the sort.
    Instead we can test the adaptability and the time complexity to 
    differ the two sort. 

    Selection sort is non-adaptable and its time complexity is always
    O(n^2) and randomised quicksort has a best and average case of
    O(n log n) which is signficantly faster than selection sort. We
    can test the sorts by testing the time taken with varying inputs from
    small quantity to large quantity and the order of inputs from sorted,
    randomised and reverse ordered inputs.

    The average time taken for the randomised quicksort should be clearly
    evident by the shorter time it takes to sort the randomised inputs
    of size above 100,000 inputs compared to selection sort.

Selection sort is O(n^2) on average, whereas randomised quicksort is
O(log n). Thus we should determine the time complexity of the program
by running it on inputs of various sizes (e.g., 10000, 20000, etc.) and
observing the time taken. If the time taken as the input size increases
follows a quadratic trend, then the program uses selection sort.
Otherwise, the program uses randomised quicksort.

(b) Is the sorting algorithm that the program uses stable? How confident
    are you in your conclusion? Explain your answer.

The output matches what would be produced by a stable sorting algorithm,
since items with the same first number have remained in the same relative
order. However this does not guarantee that the sorting algorithm is
stable, as it is possible for an unstable sorting algorithm to produce
the same output as a stable sorting algorithm. We conclude that the
program likely uses a stable sorting algorithm, but we are not 100%
certain.
